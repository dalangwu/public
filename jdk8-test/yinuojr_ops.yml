---
- hosts: 192.168.6.123
  remote_user: root
  vars:
    src_host_path: /home/jekins/.jenkins/workspace/test-yinuojr-ops/target
    dst_host_path: /data/backup/yinuojr-ops/target
    project_data_path: /bubidata/server/data
    project_backup_path: /data/backup
    project_name: yinuojr-ops
    project_jdk_path: /bubidata/server
    service_run_port: 21019
    src_package_host_ip: 192.168.2.40
    dst_package_host_ip: 192.168.6.123
    
  tasks:
    - name: create directory
      file: path={{ item }} state=directory
      with_items:
        - "{{ src_host_path }}"
        - "{{ dst_host_path }}"
        - "{{ project_backup_path }}"
        - "{{ project_name }}"
        - "{{ project_data_path }}"
        - "{{ project_jdk_path }}"
        - "{{ service_run_port }}"
        - "{{ src_package_host_ip }}"
        - "{{ dst_package_host_ip }}"

    - wait_for: path={{ src_host_path }} state=present
    - wait_for: path={{ dst_host_path }} state=present
    - wait_for: path={{ project_backup_path }} state=present
    - wait_for: path={{ project_name }} state=present
    - wait_for: path={{ project_data_path }} state=present
    - wait_for: path={{ project_jdk_path }} state=present
    - wait_for: path={{ service_run_port }} state=present
    - wait_for: path={{ src_package_host_ip }} state=present
    - wait_for: path={{ dst_package_host_ip }} state=present

    - name: check jdk variable 
      shell: cat /etc/profile
      register: result

    - name: copy jdk remote hosts
      copy: src=/package/java_jdk.tar.gz dest={{ project_jdk_path }}

    - name: tar xvf java_jdk.tar.gz
      shell: chdir={{ project_jdk_path }} tar zxf java_jdk.tar.gz

    - name: java_profile config
      shell: /bin/echo {{ item }} >> /etc/profile && source /etc/profile
      when: result.stdout.find('JAVA_HOME') == -1
      with_items:
        - export JAVA_HOME={{ project_jdk_path }}/java
        - export CLASS_PATH=.:\$JAVA_HOME/lib/dt.jar:\$JAVA_HOME/lib/tools.jar
        - export PATH=\$JAVA_HOME/bin:\$PATH

    - name: source profile
      shell: source /etc/profile

    - name: scp yinuojr_ops package to local host
      command: "sshpass -pbubi scp -o StrictHostKeyChecking=no root@{{ src_package_host_ip }}:{{ src_host_path }}/{{ project_name }}.zip {{ dst_host_path }}"  
  
    - name: check scp package md5sum
      command: "sshpass -pbubi ssh root@{{ dst_package_host_ip }} 'ls -lrt {{ dst_host_path }}/{{ project_name }}.zip;md5sum {{ dst_host_path }}/{{ project_name }}.zip'"
      register: check_scp_package
    - debug: msg={{check_scp_package.stdout_lines}}
  
    - name: md5sum src package
      command: "sshpass -p bubi ssh root@{{ src_package_host_ip }} 'ls -lrt {{ src_host_path }}/{{ project_name }}.zip;md5sum {{ src_host_path }}/{{ project_name }}.zip'"
      register: check_src_package
    - debug: msg={{check_src_package.stdout_lines}}

    #- name: add exec permission
    #  shell: chmod +x {{ dst_host_path }}/{{ project_name }}.zip

    - name: check service exists or not
      shell: "ps -ef|grep ops|grep -v grep |awk '{print $2}'"
      register: check_out_ops
    - debug: msg="{{check_out_ops.stdout_lines}}"

    - name: stop yinuojr_ops service
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch stop

    - name: check yinuojr_ops service stop 
      wait_for: port={{ service_run_port }} delay=3 state=stopped timeout=10

    - name: backup yinuojr_ops package 
      shell: mv {{ project_data_path }}/{{ project_name }} {{ project_backup_path }}/{{ project_name}} 
    - wait_for: path={{ project_data_path }}/{{ project_name }} state=absent

    - name: copy yinuojr_ops package to dst host and unzip 
      unarchive: src={{ dst_host_path }}/{{ project_name }}.zip dest={{ project_data_path }}/ copy=no

    - name: start yinuojr_ops service
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch start

    - name: check service port status
      wait_for: port={{ service_run_port }} delay=5 state=started

    - name: service start
      shell: echo "Start Successful !!!"
